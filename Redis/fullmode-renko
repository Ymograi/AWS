import pandas as pd
import selenium3 as s
import datetime
import numpy as np
import math as m
import redis
import webbrowser

r4 = redis.StrictRedis(host="localhost", port=6379, charset="utf-8", decode_responses=True,db=4)

def Get_Data_From_Redis(token):        
    freq = '1Min'
    instrument_token = token   # '11000834'
    desred_decimals = 2    

    ## Get data from Rrdis and form Candles
    data = r4.lrange(instrument_token,0,-1)
    data = [i.strip('[]').split(';') for i in data]
    df = pd.DataFrame(data, columns=['instrument_token','timestamp','close','vol'])
    df =df.astype(dtype= {"vol":"int32","close":"float32","instrument_token":"int32","timestamp":'datetime64[ns]'})    
    df = df.iloc[::-1]      
    df.reset_index(inplace=True)
    return df


def Find_First_Brick_Color(df):    
    close = df.at[0, 'close']
    floor = m.floor(close)
    ceil =  m.ceil(close)

    i=0;j=0
    while i != len(df):
        close = df.at[i, 'close']
        if close <= ceil-1:                
            floor = m.floor(close)
            ceil =  m.ceil(close)            
            j=i                                             
        elif close >= floor+2:            
            df.at[j, 'brick'] = 'Green'
            break
        i+=1

    close = df.at[0, 'close']
    floor = m.floor(close)
    ceil =  m.ceil(close)

    i=0;j=0
    while i != len(df):
        close = df.at[i, 'close']
        if close >= floor+1:                
            floor = m.floor(close)
            ceil =  m.ceil(close)            
            j=i                                             
        elif close <= ceil-2:            
            df.at[j, 'brick'] = 'Red'
            break
        i+=1
    return df

def Get_Start_Index(df):
    Greenindex = df[df.brick ==  'Green'].index[0]
    Redindex = df[df.brick ==  'Red'].index[0]

    if Redindex < Greenindex:
        startindex = Redindex
    else:
        startindex = Greenindex
    startindex
    return startindex

def Renko(df):    
    Find_First_Brick_Color(df)
    i = Get_Start_Index(df)    
    brick= df.at[i,'brick']
    close = df.at[i,'close']
    floor = m.floor(close)
    ceil = m.ceil(close)
    bricksize = 4
    
    
    if brick == "Green":
        floor = m.floor(close)
        print(floor)
    elif brick == "Red":
        ceil = m.ceil(close)
        print(ceil)
    j=i
    while i !=len(df):    
#        dateu= df.at[i-1,'date']
        close= df.at[i,'close']
            
        if brick == 'Green':
    
            if close >= floor+bricksize:                                            
#                diff = m.floor(close) - floor
                brick = 'Green'
                floor = m.floor(close)
                ceil = m.ceil(close)
#                print(df.loc[i, ['date','close']])
                print(df.loc[j, 'timestamp'],"  Green","    close: ","%05.2f"%close," floor:","{:02}".format(floor)," ceil:","{:02}".format(ceil))
#                df.at[j,'brick'] = 'Green'
                j=i
#                print('Floor:',floor)
#                print('Ceil:',ceil)
#                if i==3:
#                    break
                
    
            elif close <= floor-(bricksize*2):     
                brick = 'Red'            
                floor = m.floor(close)
                ceil = m.ceil(close)
                print(df.loc[j, 'timestamp'],"  Red  ","    close: ","%05.2f"%close," floor:","{:02}".format(floor)," ceil:","{:02}".format(ceil))
#                df.at[j,'brick'] = 'Red'
                j=i
        
        elif brick == 'Red':
        
            if close <= ceil-bricksize:
                brick = 'Red'
                floor = m.floor(close)
                ceil = m.ceil(close)    
                print(df.loc[j, 'timestamp'],"  Red  ","    close: ","%05.2f"%close," floor:","{:02}".format(floor)," ceil:","{:02}".format(ceil))
#                df.at[j,'brick'] = 'Red'
                j=i
                
            elif close >= ceil+(bricksize*2):
                brick = 'Green'            
                floor = m.floor(close)
                ceil = m.ceil(close)
                print(df.loc[j, 'timestamp'],"  Green","    close: ","%05.2f"%close," floor:","{:02}".format(floor)," ceil:","{:02}".format(ceil))
#                df.at[j,'brick'] = 'Green'
                j=i
        
        i+=1

#    df.to_html('Renko15.html')
#    webbrowser.get("C:/Program Files (x86)/Google/Chrome/Application/chrome.exe %s").open("Renko15.html")    
    return df

if __name__ == '__main__':
#    data = Get_Data_From_Redis('11000834')  
    data = Get_Data_From_Redis('10695426')
    df = Renko(data)    
#    print(data)
    
