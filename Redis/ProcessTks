import pandas as pd
import numpy as np
import selenium3 as s
from pandas import Timestamp
import redis
import time
import datetime
r = s.redis_conn(1)
r4 = s.redis_conn(4)

r4.flushdb()
while True:
    data = r.lpop('Ticks-FULL')
    if data != None:
        data_list = eval(data)
        for ticks in data_list:
            r4.lpush(ticks.get('instrument_token'),ticks)
            r4.lpush(str(ticks.get('instrument_token')) + "_backup",ticks)
           
####------------------------------------------------------------------------------------------------
import selenium3 as s
import logging
from kiteconnect import KiteTicker
from kiteconnect import KiteConnect
import pandas as pd
import redis
from datetime import datetime
from dateutil import tz
import kiteconnect.exceptions as ex
from selenium import webdriver

r = redis.Redis(host='127.0.0.1',port=6379,db=1)
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

## Get the Insrument Tokens
df = pd.read_pickle("E:/Trading Programs/00 Main Programs/pkl/NSE_FUT.pkl")
df1 = pd.read_pickle("E:/Trading Programs/00 Main Programs/pkl/NSE_BANKNIFTY_OPT.pkl")
Bank_Nifty_Tokens= df1.instrument_token.tolist()
Fut_Tokens= df.instrument_token.tolist()
tokens = Bank_Nifty_Tokens + Fut_Tokens


## Login to Kite
try:
    df = pd.read_pickle('access_token_and_date.pkl')    
    kite = KiteConnect(api_key=df[0].api_key)
    kite.set_access_token(df[0].access_token)
    access_token = df[0].access_token
    apikey = df[0].api_key
    kite.holdings()    
except ex.TokenException as token_error:
    print(token_error, "Retrying")
    try:
        chrome_path = r"H:\chromedriver_win32\chromedriver.exe"
        driver = webdriver.Chrome(chrome_path)
        driver.get(
            "https://kite.trade/connect/login?v=3&api_key=" + df[0].api_key)
        Request_token = input('Enter the Request Token: ')
        data = kite.generate_session(
            Request_token, api_secret=df[0].secret_key)
        kite.set_access_token(data["access_token"])
        d1 = {'access_token': data["access_token"],
              'api_key': df[0].api_key, 'secret_key': df[0].secret_key}
        df = pd.DataFrame.from_dict(d1, "index")
        df.to_pickle('access_token_and_date.pkl')
        kite = KiteConnect(api_key=df[0].api_key)
        kite.set_access_token(data["access_token"])        
        access_token = data["access_token"]
    except Exception as e:
        raise e

except Exception as e:
    print("Authentication failed", str(e))

    
    
# Initialise.
kws = KiteTicker(apikey, access_token, debug=False)

def on_ticks(ws, ticks):
    r.lpush("Ticks-Full",ticks)
    #print(ticks)
    
def on_connect(ws, response):
    logging.debug("on connect: {}".format(response))
    ws.subscribe(tokens)
    ws.set_mode(ws.MODE_FULL, tokens)


def on_close(ws, code, reason):
    logging.error("closed connection on close: {} {}".format(code, reason))
    #ws.stop()


def on_error(ws, code, reason):
    logging.error("closed connection on error: {} {}".format(code, reason))


def on_noreconnect(ws):
    logging.error("Reconnecting the websocket failed")


def on_reconnect(ws, attempt_count):
    logging.debug("Reconnecting the websocket: {}".format(attempt_count))


def on_order_update(ws, data):
    print("order update: ", data)

print("Starting Live Ticker")
kws.on_ticks = on_ticks
kws.on_connect = on_connect
kws.on_close = on_close
kws.on_error = on_error
kws.on_noreconnect = on_noreconnect
kws.on_reconnect = on_reconnect
kws.on_order_update = on_order_update


kws.connect(threaded=True)

import datetime
r4 = s.redis_conn(4)
r4.flushdb()
print("Starting Ticker Processor")
while True:
    data_str = r.lpop('Ticks-Full')
    if data_str is not None:
        data_list = eval(data_str)
        for ticks in data_list:        
            r4.lpush(ticks.get('instrument_token'),str(ticks.get('instrument_token')) + str(';') + str(ticks.get('timestamp')) + str(';') + str(ticks.get('last_price')) + str(';') + str(ticks.get('volume')))           

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





########
redis_data = str(ticks.get('instrument_token')) + str(';') + str(ticks.get('timestamp')) + str(';') + str(ticks.get('last_price')) + str(';') + str(ticks.get('volume'))

## Initialization
df=pd.DataFrame()
freq = '1Min'
instrument_token='11000834'
desred_decimals = 2    


## Get data from Rrdis and form Candles
data = r4.lrange(instrument_token,0,-1)
data = [i.strip('[]').split(';') for i in data]
df = pd.DataFrame(data, columns=['instrument_token','timestamp','LTP','volume'])
df =df.astype(dtype= {"volume":"int32","LTP":"float32","instrument_token":"int32","timestamp":'datetime64[ns]'})
df.set_index('timestamp',inplace=True,drop=True)
df = df.iloc[::-1]
df['vol'] = df['volume']-df['volume'].shift()
ohlc = df['LTP'].resample(freq).ohlc()
price = df['vol'].resample(freq).sum()

## OHLC Candles and indicators
df_ohlc = pd.concat([ohlc,price], axis=1)
df_ohlc["change"] = np.log(df_ohlc["close"] / df_ohlc["close"].shift())
df_ohlc['volatility-21'] = df_ohlc.change.rolling(21).std().shift()
df_ohlc['SMA-7'] = df_ohlc['close'].rolling(window=7).mean()
df_ohlc['SMA-7'].fillna(0, inplace=True)
df_ohlc['EMA-7'] = df_ohlc['close'].ewm(span=7, adjust=False).mean()


## Round OHLC
pd.options.display.precision = 2
#################################df_ohlc['open'] = df_ohlc['open'].apply(lambda x: round(x,desred_decimals))
#################################df_ohlc['high'] = df_ohlc['high'].apply(lambda x: round(x,desred_decimals))
#################################df_ohlc['low'] = df_ohlc['low'].apply(lambda x: round(x,desred_decimals))
#################################df_ohlc['close'] = df_ohlc['close'].apply(lambda x: round(x,desred_decimals))
#################################
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

import pandas as pd
import numpy as np
import selenium3 as s
from pandas import Timestamp
import redis
import time
import datetime
r = s.redis_conn(2)
r5 = s.redis_conn(5)    

r5.flushdb()
while True:
    data = r.lpop('Ticks-Quote')
    if data != None:
        data_list = eval(data)        
        for ticks in data_list[1]:
            ticks['date'] = data_list[0]
            r5.lpush(ticks.get('instrument_token'),ticks)
            r5.lpush(str(ticks.get('instrument_token')) + "_backup",ticks)

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

import pandas as pd
import numpy as np
import selenium3 as s
from pandas import Timestamp
import redis
import time
import datetime
r = s.redis_conn(3)
r6 = s.redis_conn(6)    
r6.flushdb()


while True:
    data = r.lpop('Ticks-LTP')
    if data != None:
        data_list = eval(data)
        for ticks in data_list:
            r6.lpush(ticks.get('instrument_token'),ticks)
            r6.lpush(str(ticks.get('instrument_token')) + "_backup",ticks)


