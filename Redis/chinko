import selenium4 as s
import webbrowser as w
import math as m
import pandas as pd

def Get_Stock_Data(stock):    
    data = s.Convert_Redis_data_to_DataFrame(stock )
    return data

    
def Renko(data):
    i = data[0]
    df = data[1]
    brick= df.at[i,'brick']
    close = df.at[i,'close']
    floor = m.floor(close)
    ceil = m.ceil(close)
    
    
    if brick == "Green":
        floor = m.floor(close)
        print(floor)
    elif brick == "Red":
        ceil = m.ceil(close)
        print(ceil)
    j=i
    while i !=len(df):    
        dateu= df.at[i-1,'date']
        close= df.at[i,'close']
            
        if brick == 'Green':
    
            if close >= floor+1:                                            
#                diff = m.floor(close) - floor
                brick = 'Green'
                floor = m.floor(close)
                ceil = m.ceil(close)
#                print(df.loc[i, ['date','close']])
                print(df.loc[j, 'date'],"  Green")
                j=i
#                print('Floor:',floor)
#                print('Ceil:',ceil)
#                if i==3:
#                    break
                
    
            elif close <= floor-2:     
                brick = 'Red'            
                floor = m.floor(close)
                ceil = m.ceil(close)
                print(df.loc[j, 'date'],"  Red")
                j=i
        
        elif brick == 'Red':
        
            if close <= ceil-1:
                brick = 'Red'
                floor = m.floor(close)
                ceil = m.ceil(close)    
                print(df.loc[j, 'date'],"  Red")
                j=i
                
            elif close >= ceil+2:
                brick = 'Green'            
                floor = m.floor(close)
                ceil = m.ceil(close)
                print(df.loc[j, 'date'],"  Green")
                j=i
        
        i+=1

        
    return df
    
    
    

if __name__ == '__main__':
    data = Get_Stock_Data(stockname)
    df = Renko(data)
    








## selenium4

import numpy as np
import pandas as pd
from selenium import webdriver
import datetime
#from datetime import timedelta
from dateutil import tz
import redis 
from dateutil.tz import tzoffset
import math as m

def redis_conn(dbn):
    r = redis.StrictRedis(host="localhost", port=6379, charset="utf-8", decode_responses=True,db=dbn)
    return r

def Get_Data_from_Redis(stock):    
    r14=redis_conn(14)
    stock_data = r14.lrange(stock,0,-1)
    stock_data_to_string = eval(stock_data[0])
    return stock_data_to_string
   

def Convert_Redis_data_to_DataFrame(stock):    
    print("One Minute Historic Date for ",stock)    
    stock_string = Get_Data_from_Redis(stock)
    my_dict={}
    k=0
    for i in stock_string:
        my_dict[k]=i
        k+=1
    df=pd.DataFrame.from_dict(my_dict,'index')   
    #df.set_index('date',inplace=True, drop=True)
    df["change"] = np.log(df["close"] / df["close"].shift())
    df['volatility-21'] = df.change.rolling(21).std().shift()
    df['Cumsum'] = df.volume.cumsum()
    df['Ropen']= 0;df['Rclose']= 0;df['brick'] = None ;df['floor'] = np.floor(df['close']);df['ceil'] =  np.ceil(df['close']);df['diff'] = df['close'] - df['open'];
#    return df

#def Find_First_Brick_Color(df):    
    close = df.at[0, 'close']
    floor = m.floor(close)
    ceil =  m.ceil(close)

    i=0;j=0
    while i != len(df):
        close = df.at[i, 'close']
        if close <= ceil-1:                
            floor = m.floor(close)
            ceil =  m.ceil(close)            
            j=i                                             
        elif close >= floor+2:            
            df.at[j, 'brick'] = 'Green'
            break
        i+=1

    close = df.at[0, 'close']
    floor = m.floor(close)
    ceil =  m.ceil(close)

    i=0;j=0
    while i != len(df):
        close = df.at[i, 'close']
        if close >= floor+1:                
            floor = m.floor(close)
            ceil =  m.ceil(close)            
            j=i                                             
        elif close <= ceil-2:            
            df.at[j, 'brick'] = 'Red'
            break
        i+=1
    
    
#    return df
    
#def Find_Starting_Index(df):    
    Greenindex = df[df.brick ==  'Green'].index[0]
    Redindex = df[df.brick ==  'Red'].index[0]
    
    if Redindex < Greenindex:
        startindex = Redindex
    else:
        startindex = Greenindex
    return startindex,df

