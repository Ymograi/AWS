import pandas as pd
import selenium3 as s
import datetime
import numpy as np
import math as m
import redis
r4 = redis.StrictRedis(host="localhost", port=6379, charset="utf-8", decode_responses=True,db=4)

def Get_Data_From_Redis(token):        
    freq = '1Min'
    instrument_token = token   # '11000834'
    desred_decimals = 2    

    ## Get data from Rrdis and form Candles
    data = r4.lrange(instrument_token,0,-1)
    data = [i.strip('[]').split(';') for i in data]
    df = pd.DataFrame(data, columns=['instrument_token','timestamp','LTP','vol'])
    df =df.astype(dtype= {"vol":"int32","LTP":"float32","instrument_token":"int32","timestamp":'datetime64[ns]'})
    df.set_index('timestamp',inplace=True,drop=True)
    df = df.iloc[::-1]
    df['Volume'] = df['vol']-df['vol'].shift()
    ohlc = df['LTP'].resample(freq).ohlc()
    price = df['Volume'].resample(freq).sum()

    ## Form one minute OHLC Candles and generate indicators
    df_ohlc = pd.concat([ohlc,price], axis=1)
    df_ohlc["Change"] = np.log(df_ohlc["close"] / df_ohlc["close"].shift())
    df_ohlc['21Volatility'] = df_ohlc.Change.rolling(21).std().shift()
    df_ohlc['7SMA'] = df_ohlc['close'].rolling(window=7).mean()
    df_ohlc['7SMA'].fillna(0, inplace=True)
    df_ohlc['7EMA'] = df_ohlc['close'].ewm(span=7, adjust=False).mean()


    ## Round OHLC
    df_ohlc['open'] = df_ohlc['open'].apply(lambda x: round(x,desred_decimals))
    df_ohlc['high'] = df_ohlc['high'].apply(lambda x: round(x,desred_decimals))
    df_ohlc['low'] = df_ohlc['low'].apply(lambda x: round(x,desred_decimals))
    df_ohlc['close'] = df_ohlc['close'].apply(lambda x: round(x,desred_decimals))
    df=pd.DataFrame()
    df = df_ohlc
    df.reset_index(inplace=True)
    df['Ropen']= 0;df['Rclose']= 0;df['brick'] = None ;df['floor'] = np.floor(df['close']);df['ceil'] =  np.ceil(df['close']);df['diff'] = df['close'] - df['open'];
    return df


def Find_First_Brick_Color(df):    
    close = df.at[0, 'close']
    floor = m.floor(close)
    ceil =  m.ceil(close)

    i=0;j=0
    while i != len(df):
        close = df.at[i, 'close']
        if close <= ceil-1:                
            floor = m.floor(close)
            ceil =  m.ceil(close)            
            j=i                                             
        elif close >= floor+2:            
            df.at[j, 'brick'] = 'Green'
            break
        i+=1

    close = df.at[0, 'close']
    floor = m.floor(close)
    ceil =  m.ceil(close)

    i=0;j=0
    while i != len(df):
        close = df.at[i, 'close']
        if close >= floor+1:                
            floor = m.floor(close)
            ceil =  m.ceil(close)            
            j=i                                             
        elif close <= ceil-2:            
            df.at[j, 'brick'] = 'Red'
            break
        i+=1
    return df

def Get_Start_Index(df):
    Greenindex = df[df.brick ==  'Green'].index[0]
    Redindex = df[df.brick ==  'Red'].index[0]

    if Redindex < Greenindex:
        startindex = Redindex
    else:
        startindex = Greenindex
    startindex
    return startindex

def Renko(df):
    i = Get_Start_Index(df)    
    brick= df.at[i,'brick']
    close = df.at[i,'close']
    floor = m.floor(close)
    ceil = m.ceil(close)
    
    
    if brick == "Green":
        floor = m.floor(close)
        print(floor)
    elif brick == "Red":
        ceil = m.ceil(close)
        print(ceil)
    j=i
    while i !=len(df):    
#        dateu= df.at[i-1,'date']
        close= df.at[i,'close']
            
        if brick == 'Green':
    
            if close >= floor+1:                                            
#                diff = m.floor(close) - floor
                brick = 'Green'
                floor = m.floor(close)
                ceil = m.ceil(close)
#                print(df.loc[i, ['date','close']])
                print(df.loc[j, 'date'],"  Green","    close: ","%05.2f"%close," floor:","{:02}".format(floor)," ceil:","{:02}".format(ceil), " : ",ceil+floor)
                j=i
#                print('Floor:',floor)
#                print('Ceil:',ceil)
#                if i==3:
#                    break
                
    
            elif close <= floor-2:     
                brick = 'Red'            
                floor = m.floor(close)
                ceil = m.ceil(close)
                print(df.loc[j, 'date'],"  Red  ","    close: ","%05.2f"%close," floor:","{:02}".format(floor)," ceil:","{:02}".format(ceil))
                j=i
        
        elif brick == 'Red':
        
            if close <= ceil-1:
                brick = 'Red'
                floor = m.floor(close)
                ceil = m.ceil(close)    
                print(df.loc[j, 'date'],"  Red  ","    close: ","%05.2f"%close," floor:","{:02}".format(floor)," ceil:","{:02}".format(ceil))
                j=i
                
            elif close >= ceil+2:
                brick = 'Green'            
                floor = m.floor(close)
                ceil = m.ceil(close)
                print(df.loc[j, 'date'],"  Green","    close: ","%05.2f"%close," floor:","{:02}".format(floor)," ceil:","{:02}".format(ceil))
                j=i
        
        i+=1

        
    return df

if __name__ == '__main__':
    data = Get_Data_From_Redis('11000834')    
    df = Renko(data)
    
